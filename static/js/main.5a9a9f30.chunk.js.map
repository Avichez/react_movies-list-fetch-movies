{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","React","memo","movies","map","imdbId","API_URL","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","onClickAddMovie","useState","loadedMovie","setLoadedMovie","hasSuccessResponse","setHasSuccessResponse","setQuery","isLoading","setIsLoading","handleFindMovie","event","a","preventDefault","movieData","Title","Poster","Plot","imdbID","newMovie","onSubmit","htmlFor","type","id","placeholder","value","onChange","target","cn","disabled","onClick","App","setMovies","some","m","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a9a9f30.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = React.memo(({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n));\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_KEY = 'bec8a251';\n\nconst API_URL = `https://www.omdbapi.com/?apikey=${API_KEY}`;\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport './FindMovie.scss';\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onClickAddMovie: (movie: Movie) => void,\n};\n\nconst DEFAUT_POSTER_IMG = 'https://via.placeholder.com/'\n+ '360x270.png?text=no%20preview';\nconst MOVIE_IMDB_URL = 'https://www.imdb.com/title/';\n\nexport const FindMovie: React.FC<Props> = ({ onClickAddMovie }) => {\n  const [loadedMovie, setLoadedMovie] = useState<Movie | null>(null);\n  const [hasSuccessResponse, setHasSuccessResponse] = useState(true);\n  const [query, setQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleFindMovie = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    try {\n      setIsLoading(true);\n      setHasSuccessResponse(true);\n      const movieData = await getMovie(query);\n\n      if ('Error' in movieData) {\n        throw new Error(`Can't find movie such a ${query}`);\n      }\n\n      const {\n        Title,\n        Poster,\n        Plot,\n        imdbID,\n      } = movieData;\n\n      const newMovie: Movie = {\n        title: Title,\n        description: Plot,\n        imgUrl: Poster === 'N/A'\n          ? DEFAUT_POSTER_IMG\n          : Poster,\n        imdbUrl: `${MOVIE_IMDB_URL}${imdbID}`,\n        imdbId: imdbID,\n      };\n\n      setLoadedMovie(newMovie);\n    } catch (error) {\n      setHasSuccessResponse(false);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const resetForm = () => {\n    setQuery('');\n    setLoadedMovie(null);\n    setHasSuccessResponse(true);\n  };\n\n  const handleAddMovie = () => {\n    if (loadedMovie) {\n      onClickAddMovie(loadedMovie);\n    }\n\n    resetForm();\n  };\n\n  const handleOnChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n\n    if (!hasSuccessResponse) {\n      setHasSuccessResponse(true);\n    }\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleFindMovie}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={handleOnChangeQuery}\n            />\n          </div>\n\n          {!hasSuccessResponse && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn(\n                'button is-light',\n                { 'is-loading': isLoading },\n              )}\n              disabled={!query}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {loadedMovie && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddMovie}\n              >\n                Add to the list\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n\n      {loadedMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={loadedMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const handleAddMovie = (movie: Movie) => {\n    const isPresent = movies.some(m => m.imdbId === movie.imdbId);\n\n    if (!isPresent) {\n      setMovies(prevMovies => [...prevMovies, movie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onClickAddMovie={handleAddMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}